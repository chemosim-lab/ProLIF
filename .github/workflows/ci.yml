name: tests
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  workflow_dispatch:

defaults:
  run:
    shell: bash -l {0}

concurrency:
  group: "${{ github.ref }}-${{ github.head_ref }}"
  cancel-in-progress: false

jobs:
  build:
    name: Build
    # only run once if internal PR
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    uses: ./.github/workflows/_build-package.yml
    with:
      check-prerelease: ${{ github.event_name == 'workflow_dispatch' }}
      cache-package: true
      upload-package: true
      test-files: true
      test-imports: true

  unit-tests:
    name: Test ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    # only run once if internal PR
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      matrix:
        include:
          - label: earliest
            os: ubuntu-latest
            python-version: "3.10"
            uv-sync-args: ""
            uv-run-args: "--with rdkit==2022.09.1 --with mdanalysis==2.2.0"
            coverage: false
          - label: baseline
            os: ubuntu-latest
            python-version: "3.11"
            uv-sync-args: "--locked"
            uv-run-args: ""
            coverage: true
          - label: latest
            os: ubuntu-latest
            python-version: "3.13"
            uv-sync-args: "--upgrade"
            uv-run-args: ""
            coverage: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install project and dependencies
        run: |
          uv sync --group tests ${{ matrix.uv-sync-args }}

      - name: Show installed environment
        run: |
          uv pip list

      - name: Run tests
        run: |
          uv run ${{ matrix.uv-run-args }} poe test \
              --cov=prolif \
              --cov-report=xml

      - name: Measure tests coverage
        if: matrix.coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
