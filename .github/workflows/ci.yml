name: tests
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - master
  workflow_dispatch:

defaults:
  run:
    shell: bash -l {0}

concurrency:
  group: "${{ github.ref }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  tests:
    name: CI - ${{ matrix.os }} / Py${{ matrix.python-version }} / ${{ matrix.rdkit-version }}
    runs-on: ${{ matrix.os }}
    # only run once if internal PR
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
        matrix:
          os: [ubuntu-latest]
          python-version: [3.6, 3.8, 3.9]
          rdkit-version: ["rdkit>=2020.09.1"]
          include:
          - name: RDKit min version
            os: ubuntu-latest
            python-version: 3.6
            rdkit-version: "rdkit==2020.03.1"

    steps:
    - uses: actions/checkout@v2

    - name: Setup Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python-version }}
        auto-update-conda: true
        channel-priority: flexible
        channels: conda-forge, defaults
        add-pip-as-python-dependency: true
        architecture: x64

    - name: Check conda and pip
      run: |
        which python
        python --version
        pip --version
        conda --version

    - name: Install conda dependencies
      run: |
        conda install mamba
        mamba install ${{ matrix.rdkit-version }} cython wheel
        conda list

    - name: Install package through pip
      run: |
        pip install .[tests]
        pip list

    - name: Run tests
      run: |
        pytest --color=yes --disable-pytest-warnings --cov=prolif --cov-report=xml tests/

    - name: Measure tests coverage
      uses: codecov/codecov-action@v1
      with:
        file: coverage.xml
        fail_ci_if_error: True
        verbose: True

    - name: Build
      run: |
        python setup.py sdist bdist_wheel
    
    - name: Remove previous ProLIF install
      run: |
        pip uninstall -y prolif

    - name: Install from tar.gz
      run: |
        pip install dist/prolif-*.tar.gz
    
    - name: Test tar.gz install
      run: |
        python <<EOF
        import prolif
        import os
        print(prolif.__version__)
        from prolif.plotting.network import LigNetwork
        assert os.path.isfile(prolif.datafiles.TOP)
        EOF

    - name: Remove previous ProLIF install
      run: |
        pip uninstall -y prolif

    - name: Install from wheel
      run: |
        pip install dist/prolif-*.whl
    
    - name: Test wheel install
      run: |
        python <<EOF
        import prolif
        import os
        print(prolif.__version__)
        from prolif.plotting.network import LigNetwork
        assert os.path.isfile(prolif.datafiles.TOP)
        EOF