from typing import TYPE_CHECKING

import numpy as np
import pandas as pd
import pytest
from rdkit import Chem
from rdkit.Chem.rdDistGeom import EmbedMolecule

from prolif.plotting.network.lignetwork import LigNetwork

if TYPE_CHECKING:
    from numpy.typing import NDArray


@pytest.fixture
def ligand_mol() -> Chem.Mol:
    """Create a simple ligand molecule (benzene) for testing"""
    mol = Chem.MolFromSmiles("c1ccccc1")
    mol = Chem.AddHs(mol)
    EmbedMolecule(mol, randomSeed=42)
    return mol


@pytest.fixture
def interaction_df() -> pd.DataFrame:
    """Create a more complex DataFrame with multiple residues that could cause overlaps"""
    # Create a dataframe with more interactions to test for potential overlaps
    data = [
        # ligand, protein, interaction, atoms, weight, distance, components
        ["LIG1", "PRO100.A", "Hydrophobic", (0,), 1.0, 3.5, "ligand_protein"],
        ["LIG1", "PRO100.A", "HBAcceptor", (1,), 0.8, 2.9, "ligand_protein"],
        [
            "LIG1",
            "PHE102.A",
            "PiStacking",
            (0, 1, 2, 3, 4, 5),
            0.9,
            4.0,
            "ligand_protein",
        ],
        ["LIG1", "ARG103.A", "Hydrophobic", (2,), 0.7, 3.8, "ligand_protein"],
        ["LIG1", "LYS104.A", "Hydrophobic", (3,), 0.6, 4.1, "ligand_protein"],
        ["LIG1", "ASP105.A", "HBDonor", (4, 10), 0.5, 3.2, "ligand_protein"],
        ["LIG1", "GLU106.A", "HBAcceptor", (5,), 0.4, 3.0, "ligand_protein"],
    ]

    # Create the multi-level index
    idx = pd.MultiIndex.from_tuples(
        [(row[0], row[1], row[2], row[3]) for row in data],
        names=["ligand", "protein", "interaction", "atoms"],
    )

    # Create DataFrame with weight and distance columns
    df = pd.DataFrame(
        [(row[4], row[5], row[6]) for row in data],
        index=idx,
        columns=["weight", "distance", "components"],
    )

    return df


@pytest.fixture
def lignetwork_obj(ligand_mol: Chem.Mol, interaction_df: pd.DataFrame) -> LigNetwork:
    """Create a LigNetwork object with complex interactions for testing"""
    return LigNetwork(interaction_df, ligand_mol)


def test_no_overlaps_in_lignetwork_coordinates(lignetwork_obj: LigNetwork) -> None:
    """Test that coordinates generated by LigNetwork don't have overlaps between residues
    and between residues and ligand atoms"""
    # Set show_interaction_data attribute required by _get_js and _make_graph_data
    lignetwork_obj.show_interaction_data = False
    lignetwork_obj._make_graph_data()

    # Extract protein residue nodes
    protein_nodes: dict[str, "NDArray[np.float64]"] = {}
    for node_id, node in lignetwork_obj._nodes.items():
        if isinstance(node_id, str) and node.get("group") == "protein":
            if node_id == "LIG1":
                continue
            protein_nodes[node_id] = np.array([node.get("x", 0), node.get("y", 0)])

    # Extract ligand atom nodes
    ligand_nodes: dict[int, "NDArray[np.float64]"] = {}
    for node_id, node in lignetwork_obj._nodes.items():
        if isinstance(node_id, int) and node.get("group") == "ligand":
            ligand_nodes[node_id] = np.array([node.get("x", 0), node.get("y", 0)])

    # Define minimum acceptable distance
    center, width, height = lignetwork_obj._get_ligand_center_and_dimensions()
    min_distance: float = min(100, max(width, height) * 0.3)

    # Test 1: Check for residue-residue overlaps
    for res1_id, res1_pos in protein_nodes.items():
        for res2_id, res2_pos in protein_nodes.items():
            if res1_id != res2_id:
                distance = float(np.linalg.norm(res1_pos - res2_pos))
                assert distance >= min_distance, (
                    f"Residue-residue overlap detected between {res1_id} and {res2_id}: distance={distance}"
                )

    # Test 2: Check for residue-ligand atom overlaps
    for res_id, res_pos in protein_nodes.items():
        for atom_id, atom_pos in ligand_nodes.items():
            distance = float(np.linalg.norm(res_pos - atom_pos))
            assert distance >= min_distance, (
                f"Residue-ligand overlap detected between {res_id} and atom {atom_id}: distance={distance}"
            )
